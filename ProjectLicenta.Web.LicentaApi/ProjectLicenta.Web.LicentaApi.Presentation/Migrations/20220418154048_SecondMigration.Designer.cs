// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectLicenta.Web.LicentaApi.Infrastructure.Data;

namespace ProjectLicenta.Web.LicentaApi.Presentation.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220418154048_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.Anunturi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Arhivat")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DataPostare")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdServiciu")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUtilizator")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Negociabil")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Prestator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Pret")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.Property<string>("Titlu")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdServiciu");

                    b.HasIndex("IdUtilizator");

                    b.ToTable("Anunturi");
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.AnunturiPrestate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdAnunt")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUtilizator")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("IdUtilizator");

                    b.ToTable("AnunturiPrestate");
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.Cautari", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCautare")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdAnunt")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUtilizator")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ProfilAccesat")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("TimpPeProfil")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdAnunt");

                    b.HasIndex("IdUtilizator");

                    b.ToTable("Cautari");
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.FeedBacks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdServiciu")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUtilizatorDat")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUtilizatorPrimit")
                        .HasColumnType("char(36)");

                    b.Property<int>("NrStele")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.Property<string>("Titlu")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.HasKey("Id");

                    b.HasIndex("IdUtilizatorPrimit");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.Servicii", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("NumeServiciu")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.HasKey("Id");

                    b.ToTable("Servicii");
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.Utilizator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.Property<string>("Localitate")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Parola")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET latin1");

                    b.Property<int>("Telefon")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Utilizatori");
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.UtilizatoriFavoriti", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUtilizatorFavorit")
                        .HasColumnType("char(36)");

                    b.HasKey("Id", "IdUtilizatorFavorit");

                    b.HasIndex("IdUtilizatorFavorit");

                    b.ToTable("UtilizatoriFavoriti");
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.Anunturi", b =>
                {
                    b.HasOne("ProjectLicenta.Web.LicentaApi.Core.Models.Servicii", "Servicii")
                        .WithMany("AnunturiList")
                        .HasForeignKey("IdServiciu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLicenta.Web.LicentaApi.Core.Models.Utilizator", "Utilizator")
                        .WithMany("AnunturiList")
                        .HasForeignKey("IdUtilizator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.AnunturiPrestate", b =>
                {
                    b.HasOne("ProjectLicenta.Web.LicentaApi.Core.Models.Utilizator", "Utilizator")
                        .WithMany("AnunturiPrestateList")
                        .HasForeignKey("IdUtilizator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.Cautari", b =>
                {
                    b.HasOne("ProjectLicenta.Web.LicentaApi.Core.Models.Anunturi", "Anunturi")
                        .WithMany("CautariList")
                        .HasForeignKey("IdAnunt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectLicenta.Web.LicentaApi.Core.Models.Utilizator", "Utilizator")
                        .WithMany("CautariList")
                        .HasForeignKey("IdUtilizator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.FeedBacks", b =>
                {
                    b.HasOne("ProjectLicenta.Web.LicentaApi.Core.Models.Utilizator", "Utilizator")
                        .WithMany("FeedbacksList")
                        .HasForeignKey("IdUtilizatorPrimit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectLicenta.Web.LicentaApi.Core.Models.UtilizatoriFavoriti", b =>
                {
                    b.HasOne("ProjectLicenta.Web.LicentaApi.Core.Models.Utilizator", "Utilizator")
                        .WithMany("UtilizatoriFavoritiList")
                        .HasForeignKey("IdUtilizatorFavorit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
